from plot import *
import numpy as np
import tensorflow as tf
import TrainCNNWithFT as TrainCNN
g2 = tf.Graph()
session_local = tf.Session(graph=g2)
def Conrtofimage(image):
    idx = 0
    DATA_LEN = 56*56*3
    CHANNEL_LEN = 56*56
    SHAPE = 56
    img = np.zeros((1, DATA_LEN), dtype = np.uint8)
    s, c = SHAPE, CHANNEL_LEN
    img[idx, :c] = np.reshape(image[:, :, 0],c)
    img[idx, c:2*c] = np.reshape(image[:, :, 1],c)
    img[idx, 2*c:] = np.reshape(image[:, :, 2],c)
    img_float = np.array(img, dtype=float)/255.0
    image=img_float.reshape([-1, 3, 56, 56])
    image=image.transpose([0, 2, 3, 1])
    return image
with session_local.as_default():
    with g2.as_default():
        x_local = tf.placeholder(tf.float32, shape=[None, 56, 56, 3], name='x')
        layer_conv1, weights_conv1 = \
            TrainCNN.new_conv_layer(input=x_local,
                                    num_input_channels=num_channels,
                                    filter_size=5,
                                    num_filters=64,
                                    name='layer_conv1',
                                    use_pooling=True)
        layer_conv2, weights_conv2 = \
            TrainCNN.new_conv_layer(input=layer_conv1,
                                    num_input_channels=64,
                                    filter_size=5,
                                    num_filters=64,
                                    name='layer_conv2',
                                    use_pooling=True)
        layer_conv3, weights_conv3 = \
            TrainCNN.new_conv_layer(input=layer_conv2,
                                    num_input_channels=64,
                                    filter_size=5,
                                    num_filters=64,
                                    name='layer_conv3',
                                    use_pooling=True)
        layer_flat, num_features = TrainCNN.flatten_layer(layer_conv3)
        layer_fc1 = TrainCNN.new_fc_layer(input=layer_flat,
                                          num_inputs=num_features,
                                          num_outputs=256,
                                          use_relu=True)
        layer_fc2 = TrainCNN.new_fc_layer(input=layer_fc1,
                                          num_inputs=256,
                                          num_outputs=3,
                                          use_relu=False)
        y_pred = tf.nn.softmax(layer_fc2)
        y_pred_cls = tf.argmax(y_pred, axis=1)
        saver_local = tf.train.Saver()
        save_dir = './checkpoints_1/'
        print("Trying to restore last checkpoint ...")
        last_chk_path = tf.train.latest_checkpoint(checkpoint_dir=save_dir)
        saver_local.restore(session_local, save_path=last_chk_path)
        print("Restored checkpoint from:", last_chk_path)
def CNNForScheringLocal(image):
    with session_local.as_default():
        with session_local.graph.as_default():
            image_test = Conrtofimage(image)
            img_float = image_test[0]
            label_pred, cls_pred = session_local.run([y_pred, y_pred_cls], feed_dict={x_local: [img_float]})
return cls_pred+1
